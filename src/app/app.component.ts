import { Component, ElementRef, ViewChild } from '@angular/core';
import { FormControl, AbstractControl } from '@angular/forms';
import '../../node_modules/codemirror/mode/pascal/pascal';
import '../../node_modules/codemirror/addon/edit/matchbrackets';
import '../../node_modules/codemirror/addon/hint/show-hint';
import '../../node_modules/codemirror/mode/clike/clike';
import '../../node_modules/codemirror/mode/pegjs/pegjs';
import '../../node_modules/codemirror/mode/javascript/javascript';
import { generate } from 'pegjs';
import { simple_ast_grammar } from './grammar';
import { examples } from './examples';
import { AST } from './ast';
import { Network } from 'vis';
import { generateAST } from './ast-generator/ast.graph-generator';
import { run } from './interpreter/interpreter';
import { cgenerate } from './cgenerator/cgenerator';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {

  @ViewChild("astDiv", { static: true }) astDiv: ElementRef;
  examples = examples;

  //The following are the inputs of the page
  //the instanciation order is important because of the change functions
  c = new FormControl(null);
  middle = new FormControl(null);
  code = new FormControl(null, (v) => this.codeChanged(v));
  codeSelector = new FormControl(0, (v) => this.codeSelectorChange(v));
  frontEnd = new FormControl(simple_ast_grammar, (v) => this.frontEndChanged(v));
  input = new FormControl(null);
  output = new FormControl(null);

  ast: AST;
  running = false;
  network: Network;

  run() {
    this.running = true;
    setTimeout(() => this.output.setValue(null));
    try {
      let result = run(this.ast, this.input.value);
      setTimeout(() => this.output.setValue(result));
    } catch (e) {
      console.error(e);
      this.input.markAsTouched();
      this.input.setErrors({ message: e.message });
    }
  }


  // The following are configurations for the text editors
  frontEnd_config = {
    styleActiveLine: true,
    lineNumbers: true,
    mode: { name: "pegjs" },
    theme: "ambiance"
  }
  code_config = {
    styleActiveLine: true,
    lineNumbers: true,
    mode: "text/x-pascal",
    theme: "ambiance"
  }
  middle_config = {
    styleActiveLine: true,
    lineNumbers: true,
    readonly: true,
    mode: "application/json",
    theme: "ambiance"
  }
  c_config = {
    styleActiveLine: true,
    lineNumbers: true,
    readonly: true,
    matchBrackets: true,
    mode: "text/x-csrc",
    theme: "ambiance"
  }

  /**
   * The parser generated by the front end
   */
  parser: PEG.Parser;

  //the following are methods to run when the code on the text editors change
  codeSelectorChange(c: AbstractControl) {
    setTimeout(() => this.code.setValue(this.examples[c.value].code));
    return null;
  }
  frontEndChanged(c: AbstractControl) {
    try {
      this.parser = generate(c.value);
      this.code.updateValueAndValidity();
    } catch (e) {
      console.error(e);
      let line = "";
      let column = "";
      try {
        line = e.location.start.line;
        column = e.location.start.column;
      } catch  { }
      return { parser: e.message + " at line " + line + " and column " + column };
    }
  }

  codeChanged(c: AbstractControl) {
    if (this.parser) {
      try {
        this.ast = this.parser.parse(c.value || "");
        setTimeout(() => this.middle.setValue(JSON.stringify(this.ast, null, 4)));
        setTimeout(() => this.c.setValue(cgenerate(this.ast)));
        if (this.astDiv) {
          if (this.network) {
            this.network.destroy();
          }
          this.network = generateAST(this.ast, this.astDiv.nativeElement);
        }
      } catch (e) {
        console.error(e);
        let line = "";
        let column = "";
        try {
          line = e.location.start.line;
          column = e.location.start.column;
        } catch  { }
        return { parser: e.message + " at line " + line + " and column " + column };
      }
    }
  }
}
